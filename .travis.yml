#------------#
#   Tomato   #
#------------#

language: cpp
dist: xenial
osx_image: xcode12

os:
  - linux
  - osx

compiler:
  - gcc

# Blacklist the documentation branch
branches:
  except:
    - gh-pages

# Environment variables
env:
  jobs:
    - CXX_STANDARD=98
#    - CXX_STANDARD=11
  global:
    - GH_REPO_NAME: Tomato # used in documentation script
    - DOXYFILE: $TRAVIS_BUILD_DIR/Doxyfile # used in documentation script
    - INPUT_FOR_DOXY: "'. ./app ./lib ./tests'" # used in documentation script
    - OUTPUT_FOR_DOXY: "${TRAVIS_BUILD_DIR}/code_docs/${GH_REPO_NAME}" # used in documentation script
    - GH_REPO_REF: github.com/MRKonrad/Tomato.git # used in documentation script
    - EXTENDED_BUILD: "OFF"
    - DEPLOY_BUILD: "OFF"
    - secure: ${GH_PERSONAL_ACCESS_TOKEN}

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-4.9
      - g++-4.9
      - doxygen
      - doxygen-doc
      - doxygen-latex
      - doxygen-gui
      - graphviz
      - lcov

before_install:

  # condition for the extended build (with coverage and documentation)
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$CXX" == "g++" ] && [ "$CXX_STANDARD" == "98" ]; then
      EXTENDED_BUILD="ON";
    fi

  # condition for the deployment build
  - if [ "$CXX" == "g++" ] && [ "$CXX_STANDARD" == "98" ]; then
      export DEPLOY_BUILD="ON";
    fi

  # zip the data used for deployment
  - cd ${TRAVIS_BUILD_DIR}/tests/testData
  - zip -r testData.zip dicom
  - zip -r testData.zip tomatoConfig_Shmolli_inputFilePaths.yaml

install:
  #      pyenv versions;
  #      pyenv shell 3.6.1; #3.6.3 for trusty #3.7.1 for xenial
  #      python --version;
  #      pip --version;
  #      pip3 --version;
  #      conan profile update settings.compiler.libcxx=libstdc++11 default;
  #      OR
  #      conan profile update settings.compiler.version=4.9 default;
  #      conan profile update env.CC=/usr/bin/gcc-4.9 default;
  #      conan profile update env.CXX=/usr/bin/g++-4.9 default;
  ### conan linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get remove googletest
      python --version;
      pyenv versions;
      pyenv shell 3.7.1;
      python --version;
      pip --version;
      pip3 --version;
      pip3 install --user conan;
      conan user;
      conan profile new default --detect;
      conan profile update settings.compiler.version=4.9 default;
      conan profile update env.CC=/usr/bin/gcc-4.9 default;
      conan profile update env.CXX=/usr/bin/g++-4.9 default;
      export CC=/usr/bin/gcc-4.9;
      export CXX=/usr/bin/g++-4.9;
    fi
  ### conan macos
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      pip3 install conan;
      conan user;
      conan profile new default --detect;
      conan profile update settings.compiler=apple-clang default;
      conan profile update settings.compiler.libcxx=libc++ default;
      conan profile update settings.compiler.version=12.0 default;
    fi
  ### conan remote
  - conan remote add artifactory https://mrkonrad.jfrog.io/artifactory/api/conan/tomato
  ### install coverage tools only in linux g++
  - if [ "$EXTENDED_BUILD" == "ON" ]; then
      sudo pip install codecov;
    fi

script:
  #-----------------------#
  #   Tomato opensource   #
  #-----------------------#
  - cd ${TRAVIS_BUILD_DIR}
  - conan create . user/testing -s build_type=Release -o tomato:build_testing=True -o tomato:use_yaml=True
  # configure and generate opensource
  - mkdir ${TRAVIS_BUILD_DIR}/opensource;
  - cd ${TRAVIS_BUILD_DIR}/opensource;
  - conan install .. -s build_type=Release -g cmake_find_package -o use_lmfit=True -o use_yaml=True -o build_testing=True
  - >-
    cmake ..
    -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/opensource_install
    -DCMAKE_CXX_STANDARD=${CXX_STANDARD}
    -DCMAKE_MACOSX_RPATH=ON
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON

  # build opensource
  - cmake --build . --config RELEASE
  - cmake --build . --config RELEASE --target install

  #--------------------#
  #   Tomato full VNL  #
  #--------------------#

  # download tomato_private
  - cd ${TRAVIS_BUILD_DIR}/..
  - git clone https://MRKonrad:${GH_PERSONAL_ACCESS_TOKEN}@github.com/MRKonrad/tomato_private

  # configure and generate full
  - mkdir ${TRAVIS_BUILD_DIR}/full
  - cd ${TRAVIS_BUILD_DIR}/full
  - conan install .. -s build_type=Release -g cmake_find_package -o use_lmfit=True -o use_vnl=True -o use_itk=False -o use_yaml=True -o build_testing=True
  - >-
    cmake ..
    -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/full_install
    -DCMAKE_CXX_STANDARD=${CXX_STANDARD}
    -DCMAKE_MACOSX_RPATH=ON
    -DUSE_PRIVATE_NR2=ON
    -DUSE_ITK=OFF
    -DDOWNLOAD_DEPENDENCIES=OFF
    -DBUILD_APP=OFF

  # build full
  - cmake --build . --config RELEASE
  - cmake --build . --config RELEASE --target install

  #----------------------#
  #   Tomato full ITK    #
  #----------------------#

  # configure and generate full
  - mkdir ${TRAVIS_BUILD_DIR}/full_itk
  - cd ${TRAVIS_BUILD_DIR}/full_itk
  - conan install .. -s build_type=Release -g cmake_find_package -o use_itk=True -o use_lmfit=True -o use_yaml=True -o build_testing=True
  - >-
    cmake ..
    -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/full_itk_install
    -DCMAKE_CXX_STANDARD=${CXX_STANDARD}
    -DCMAKE_MACOSX_RPATH=ON
    -DUSE_PRIVATE_NR2=ON
    -DUSE_ITK=ON
    -DDOWNLOAD_DEPENDENCIES=ON
    -DBUILD_APP=ON

  # add coverage option (only in linux g++)
  - if [ "$EXTENDED_BUILD" == "ON" ]; then
    cmake .. -DCMAKE_CXX_FLAGS="--coverage" ;
    fi

  # build full
  - cmake --build . --config RELEASE
  - cmake --build . --config RELEASE --target install

  #--------------------------#
  #   Testing and coverage   #
  #--------------------------#
  - cd ${TRAVIS_BUILD_DIR}/opensource_install/tests
  - ./TomatoTests
  - cd ${TRAVIS_BUILD_DIR}/full_install/tests
  - ./TomatoTests
  - cd ${TRAVIS_BUILD_DIR}/full_itk_install/tests
  - ./TomatoTests
    
after_success:
  # Run coverage analysis only in linux g++. Eval because travis wants to parse -- as part of yaml block
  - if [ "$EXTENDED_BUILD" == "ON" ]; then
      cd ${TRAVIS_BUILD_DIR}/full_itk ;
      cp ${TRAVIS_BUILD_DIR}/scriptsBuild/generateTestCoverageReport.sh generateTestCoverageReport.sh;
      sh generateTestCoverageReport.sh;
      ls;
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports" ;
    fi

  # Generate and deploy documentation only in linux g++
  - if [ "$EXTENDED_BUILD" == "ON" ]; then
      cd ${TRAVIS_BUILD_DIR} ;
      cp ${TRAVIS_BUILD_DIR}/scriptsBuild/generateDocumentationAndDeploy.sh generateDocumentationAndDeploy.sh;
      chmod +x generateDocumentationAndDeploy.sh;
      ./generateDocumentationAndDeploy.sh;
    fi

  # getting directories and variables ready for deployment
  - mkdir ${TRAVIS_BUILD_DIR}/deployment
  - export opensource_extended_name=TomatoOpenSource_${TRAVIS_BRANCH}_${TRAVIS_OS_NAME} # just a variable
  - export full_extended_name=TomatoFull_${TRAVIS_BRANCH}_${TRAVIS_OS_NAME} # just a variable

  # prepare to deploy TomatoOpenSource
  - cd ${TRAVIS_BUILD_DIR}/opensource_install
  - zip -r ${opensource_extended_name}.zip lib/libTomatoLib*
  - zip -r ${opensource_extended_name}.zip include
  - zip -r ${opensource_extended_name}.zip bin

  # prepare to deploy TomatoFull
  - cd ${TRAVIS_BUILD_DIR}/full_install
  - zip -r ${full_extended_name}.zip lib/libTomatoLib*
  - zip -r ${full_extended_name}.zip include
  - zip -r ${full_extended_name}.zip bin

  # copy the archives
  - cp ${TRAVIS_BUILD_DIR}/opensource_install/${opensource_extended_name}.zip ${TRAVIS_BUILD_DIR}/deployment/
  - cp ${TRAVIS_BUILD_DIR}/full_install/${full_extended_name}.zip ${TRAVIS_BUILD_DIR}/deployment/
  - cp ${TRAVIS_BUILD_DIR}/tests/testData/testData.zip ${TRAVIS_BUILD_DIR}/deployment/testData.zip
  - ls ${TRAVIS_BUILD_DIR}/deployment
  - cd ${TRAVIS_BUILD_DIR} # needed for deployment!!!

deploy:
  provider: releases
  token:
    secure: ${GH_PERSONAL_ACCESS_TOKEN}
  file_glob: true
  file: deployment/*
  cleanup: false
  overwrite: true
  on:
    tags: true
    condition: ${DEPLOY_BUILD} == "ON" # I guess I have to pick one compiler
